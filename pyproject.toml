[tool.poetry]
name = "atciss"
version = "0.1.0"
description = "VATSIM Germany ATCISS"
authors = ["Franz Pletz <fpletz@fnordicwalking.de>"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/vatger/atciss"

[tool.poetry.dependencies]
python = "^3.11"
aiohttp = "^3.10.5"
alembic = "^1.13.2"
asgi-correlation-id = "^4.3.2"
asgiref = "^3.8.1"
astral = "^3.2"
asyncpg = "^0.29.0"
beautifulsoup4 = "^4.12.3"
click = "^8.1"
fastapi = {version = "^0.112.2", extras = ["all"]}
geoalchemy2 = "^0.15.2"
greenlet = "^3.0.3"
haversine = "^2.8.1"
lark = "^1"
loguru = "^0.7.2"
lxml = "^5.3.0"
metar = { git = "https://github.com/globin/python-metar", rev = "35efaa6f76d00bd53b9e29bb0f87fbc3c80d8af2" }
prometheus-fastapi-instrumentator = "^7.0.0"
pydantic = "~2.8"
pydantic-settings = "^2.4.0"
pydantic-xml = {extras = ["lxml"], version = "^2.12"}
pynotam = { git = "https://github.com/globin/PyNotam", rev = "84b741863d09aaa616e6f378a2e6e5eab8df706f" }
python-dateutil = "^2.9.0"
python-jose = "^3.3.0"
redis = "^5"
regex = "^2024.7.24"
shapely = "^2.0.6"
sqlalchemy = { version = "^2.0.32", extras = [ "asyncio" ] }
sqlmodel = "0.0.21"
taskiq = "^0"
taskiq-redis = "^1"
taskiq-fastapi = "^0"
uvicorn = {extras = ["standard"], version = "^0.30"}
xmltodict = "^0.13.0"
vatsim = "^0.1.1"
eaup = { git = "https://gitlab.com/fpletz/eaup.git", rev = "d9270df4097ca62359215cc762d41a0827d8dd06" }

# needs bump in poetry2nix
watchfiles = "~0.23"
orjson = "3.10.7"

[tool.poetry.group.dev.dependencies]
pylint = "^3.2"
types-beautifulsoup4 = "^4.12.0.20240511"
types-python-jose = "^3.3.4.20240106"
mypy = "^1.11.2"
pyright = "1.1.377"
ruff = "0.5.7"
types-xmltodict = "^0.13.0.3"
pyrasite = "^2.0"
taskiq = { version = "^0", extras = ["reload"] }

[tool.poetry.scripts]
atciss = 'atciss.cli:cli'

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
exclude = [
  "atciss/app/views/notam.py",
]
python_version = '3.11'
show_error_codes = true
follow_imports = 'silent'
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true
warn_unused_configs = true
disallow_subclassing_any = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_calls = true
disallow_untyped_defs = true
implicit_optional = true

[[tool.mypy.overrides]]
module = [
    "parsimonious.*",
    "redis.*",
]
ignore_missing_imports = true

[tool.pylint.format]
jobs = 0
disable = [
  "W0611", # unused-import
  "R0902", # too-many-instance-attributes
  "R0903", # too-few-public-methods
  "C0114", # missing-module-docstring
  "C0115", # missing-class-docstring
  "C0116", # missing-function-docstring
  "W0511", # fixme
  "C0103", # invalid-name
]
output-format = "colorized"
max-line-length = 100
max-locals = 20

[tool.pyright]
include = ["atciss"]

pythonVersion = "3.11"
pythonPlatform = "Linux"

typeCheckingMode = "strict"

reportIncompatibleVariableOverride = false
reportMissingTypeArgument = false
reportUnknownArgumentType = false
reportUnknownMemberType = false
reportUnknownParameterType = false
reportUnknownVariableType = false
reportUnusedImport = false

reportCallInDefaultInitializer = "error"
reportImplicitOverride = "error"
reportImplicitStringConcatenation = "error"
reportImportCycles = "error"
reportMissingSuperCall = "error"
reportPropertyTypeMismatch = "error"
reportShadowedImports = "error"
reportUninitializedInstanceVariable = "error"
# reportUnnecessaryTypeIgnoreComment = "error"
reportUnusedCallResult = "error"

[tool.ruff]
line-length = 100
target-version = "py311"
preview = true

[tool.ruff.lint]
select = [
  "E",  # pycodestyle errors
  "W",  # pycodestyle warnings
  "F",  # pyflakes
  "C90",  # mccabe
  "I",  # isort
  "ASYNC",  # flake8-async
  "B",  # flake8-bugbear
  "BLE",  # flake8-blind-except
  "COM",  # flake8-commas
  "C4",  # flake8-comprehensions
  "DTZ",  # flake8-datetimez
  "EM",  # flake8-errmsg
  "ICN",  # flake8-import-conventions
  "PYI",  # flake8-pyi
  "Q",  # flake8-quotes
  "SIM",  # flake8-simplify
  "TCH",  # flake8-typechecking
  "PTH",  # flake8-use-pathlib
  "UP",  # pyupgrade
  "RUF",  # ruff-specific
  "TRY",  # tryceratops
  "FURB", # refurb
]
ignore = ["COM812"]
