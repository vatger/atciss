[tool.poetry]
name = "atciss"
version = "0.1.0"
description = "VATSIM Germany ATCISS"
authors = ["Franz Pletz <fpletz@fnordicwalking.de>"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/vatger/atciss"

[tool.poetry.dependencies]
python = "^3.12"
aiohttp = "^3.11.13"
alembic = "^1.14.0"
asgi-correlation-id = "^4.3.4"
asgiref = "^3.8.1"
astral = "^3.2"
asyncpg = "^0.30.0"
beautifulsoup4 = "^4.12.3"
click = "^8.1"
fastapi = { version = "^0.115.6", extras = ["all"] }
geoalchemy2 = "^0.17.1"
greenlet = "^3.1.1"
haversine = "^2.9.0"
lark = "^1"
loa = { git = "https://github.com/vatger-nav/loa.git", rev = "dcd8fccddb7bc94830975ccc1a5c8d10edc7de18" }
loguru = "^0.7.2"
lxml = "^5.3.0"
metar = { git = "https://github.com/globin/python-metar", rev = "35efaa6f76d00bd53b9e29bb0f87fbc3c80d8af2" }
prometheus-fastapi-instrumentator = "^7.0.0"
pydantic = "~2.10"
pydantic-settings = "^2.8.1"
pydantic-xml = { extras = ["lxml"], version = "^2.14" }
pynotam = { git = "https://github.com/globin/PyNotam", rev = "84b741863d09aaa616e6f378a2e6e5eab8df706f" }
python-dateutil = "^2.9.0"
python-jose = "^3.4.0"
redis = "^5"
regex = "^2024.11.6"
shapely = "^2.0.6"
sqlalchemy = { version = "^2.0.36", extras = ["asyncio"] }
sqlmodel = "0.0.22"
taskiq = "^0"
taskiq-redis = "^1"
taskiq-fastapi = "^0"
uvicorn = { extras = ["standard"], version = "^0.34" }
xmltodict = "^0.14.2"
vatsim = "^0.2.0"
eaup = { git = "https://gitlab.com/fpletz/eaup.git", rev = "d9270df4097ca62359215cc762d41a0827d8dd06" }

# needs bump in poetry2nix
watchfiles = "~0.24"
orjson = "3.10.11"

[tool.poetry.group.dev.dependencies]
pylint = "^3.3"
types-beautifulsoup4 = "^4.12.0.20241020"
types-python-jose = "^3.4.0.20250224"
mypy = "^1.14.0"
pyright = "1.1.394"
ruff = "0.8.0"
types-xmltodict = "^0.14.0.20241009"
pyrasite = "^2.0"
taskiq = { version = "^0", extras = ["reload"] }

[tool.poetry.scripts]
atciss = 'atciss.cli:cli'

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
exclude = ["atciss/app/views/notam.py"]
python_version = '3.11'
show_error_codes = true
follow_imports = 'silent'
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true
warn_unused_configs = true
disallow_subclassing_any = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_calls = true
disallow_untyped_defs = true
implicit_optional = true

[[tool.mypy.overrides]]
module = ["parsimonious.*", "redis.*"]
ignore_missing_imports = true

[tool.pylint.format]
jobs = 0
disable = [
        "W0611", # unused-import
        "R0902", # too-many-instance-attributes
        "R0903", # too-few-public-methods
        "C0114", # missing-module-docstring
        "C0115", # missing-class-docstring
        "C0116", # missing-function-docstring
        "W0511", # fixme
        "C0103", # invalid-name
]
output-format = "colorized"
max-line-length = 100
max-locals = 20

[tool.pyright]
include = ["atciss"]

pythonVersion = "3.11"
pythonPlatform = "Linux"

typeCheckingMode = "strict"

reportIncompatibleVariableOverride = false
reportMissingTypeArgument = false
reportUnknownArgumentType = false
reportUnknownMemberType = false
reportUnknownParameterType = false
reportUnknownVariableType = false
reportUnusedImport = false

reportCallInDefaultInitializer = "error"
reportImplicitOverride = "error"
reportImplicitStringConcatenation = "error"
reportImportCycles = "error"
reportMissingSuperCall = "error"
reportPropertyTypeMismatch = "error"
reportShadowedImports = "error"
reportUninitializedInstanceVariable = "error"
# reportUnnecessaryTypeIgnoreComment = "error"
reportUnusedCallResult = "error"

[tool.ruff]
line-length = 100
target-version = "py311"
preview = true

[tool.ruff.lint]
select = [
        "E",     # pycodestyle errors
        "W",     # pycodestyle warnings
        "F",     # pyflakes
        "C90",   # mccabe
        "I",     # isort
        "ASYNC", # flake8-async
        "B",     # flake8-bugbear
        "BLE",   # flake8-blind-except
        "COM",   # flake8-commas
        "C4",    # flake8-comprehensions
        "DTZ",   # flake8-datetimez
        "EM",    # flake8-errmsg
        "ICN",   # flake8-import-conventions
        "PYI",   # flake8-pyi
        "Q",     # flake8-quotes
        "SIM",   # flake8-simplify
        "TCH",   # flake8-typechecking
        "PTH",   # flake8-use-pathlib
        "UP",    # pyupgrade
        "RUF",   # ruff-specific
        "TRY",   # tryceratops
        "FURB",  # refurb
]
ignore = ["COM812"]
